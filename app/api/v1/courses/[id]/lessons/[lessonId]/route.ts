import { type NextRequest, NextResponse } from "next/server"
import type { LessonDetail } from "@/types/api"

interface RouteParams {
  params: {
    id: string
    lessonId: string
  }
}

export async function GET(request: NextRequest, { params }: RouteParams) {
  const { id: courseId, lessonId } = params

  // モックデータ
  const mockLessons: Record<string, Record<string, LessonDetail>> = {
    "intro-to-ai": {
      "lesson-1": {
        id: "lesson-1",
        title: "生成AIとは何か",
        courseId: "intro-to-ai",
        courseTitle: "生成AIの基礎",
        duration: "20分",
        content: `
# 生成AIとは何か

## はじめに

生成AIは、新しいコンテンツを作成することができる人工知能の一種です。テキスト、画像、音楽、動画など、様々な形式のコンテンツを生成することができます。

## 生成AIの定義

生成AIとは、学習データから新しいコンテンツを生成することができる人工知能モデルのことを指します。これらのモデルは、既存のデータパターンを学習し、それに基づいて新しいコンテンツを作成します。

例えば、テキスト生成AIは、大量のテキストデータを学習し、それに基づいて新しい文章を生成することができます。

## 生成AIの歴史

生成AIの歴史は比較的新しく、主な進展は以下の通りです：

1. **2014年**: GANs（敵対的生成ネットワーク）の登場
2. **2017年**: Transformerアーキテクチャの発表
3. **2018年**: GPT-1の登場
4. **2020年**: GPT-3の登場
5. **2021年**: DALL-E、Stable Diffusionなどの画像生成AIの普及
6. **2022年**: ChatGPTの公開
7. **2023年**: GPT-4の登場

## 生成AIの種類

主な生成AIの種類は以下の通りです：

### テキスト生成AI

\`\`\`javascript
// テキスト生成AIの簡単な例
console.log("テキスト生成AIの例");
\`\`\`

### 画像生成AI

画像生成AIは、テキストプロンプトから画像を生成することができます。代表的なモデルには、DALL-E、Stable Diffusion、Midjourneyなどがあります。
        `,
      },
      "lesson-2": {
        id: "lesson-2",
        title: "大規模言語モデル（LLM）の仕組み",
        courseId: "intro-to-ai",
        courseTitle: "生成AIの基礎",
        duration: "25分",
        content: `
# 大規模言語モデル（LLM）の仕組み

## はじめに

大規模言語モデル（Large Language Models, LLM）は、膨大な量のテキストデータを学習し、人間のような文章を生成できる人工知能モデルです。ChatGPTやGPT-4などが代表的なLLMです。

## LLMの基本構造

LLMの多くは、**Transformer**と呼ばれるニューラルネットワークのアーキテクチャに基づいています。Transformerは2017年にGoogleの研究者によって発表され、「Attention Is All You Need」という論文で紹介されました。

Transformerの主な特徴は以下の通りです：

1. **Self-Attention機構**: 文章中の単語間の関係性を捉える仕組み
2. **並列処理**: 従来のRNNと異なり、文章を並列に処理できる
3. **スケーラビリティ**: モデルサイズを大きくしやすい構造

## LLMの学習方法

LLMは主に以下の方法で学習されます：

### 事前学習（Pre-training）

大量のテキストデータを使って、言語の基本的な構造や知識を学習します。主に以下の2つの方法があります：

1. **マスク言語モデル（MLM）**: 文中の一部の単語をマスクし、それを予測する（BERTなど）
2. **自己回帰モデル（AR）**: 文章の続きを予測する（GPTシリーズなど）

\`\`\`python
# 自己回帰モデルの簡略化された例
def autoregressive_prediction():
  print("自己回帰モデルの例")
\`\`\`

### 微調整（Fine-tuning）

特定のタスクや目的に合わせて、事前学習済みのモデルをさらに調整します。例えば：

- 特定の文体やトーンに合わせる
- 特定のドメイン（医療、法律など）の知識を強化する
- 有害な出力を減らす

## LLMのサイズと能力

LLMの能力は、主にモデルの**パラメータ数**によって左右されます。パラメータ数が多いほど、より複雑な言語パターンを学習できます。

- GPT-3: 1750億パラメータ
- GPT-4: 非公開（推定1兆パラメータ以上）
- LLaMA 2: 70億〜700億パラメータ

パラメータ数が増えるにつれて、以下のような能力が向上します：

1. **文脈理解**: より長い文脈を理解し、一貫性のある応答ができる
2. **知識の幅**: より多様な分野の知識を持つ
3. **指示への対応**: 複雑な指示や制約に従える
4. **推論能力**: 論理的な推論や問題解決ができる

## LLMの限界と課題

LLMには以下のような限界や課題があります：

1. **幻覚（Hallucination）**: 事実でない情報を自信を持って提示することがある
2. **バイアス**: 学習データに含まれるバイアスを反映してしまう
3. **最新情報の欠如**: 学習データの期間以降の情報を知らない
4. **計算コスト**: 大規模なモデルの学習や実行には膨大な計算リソースが必要

これらの課題を解決するために、様々な研究や取り組みが進められています。
        `,
      },
    },
    "prompt-engineering": {
      "lesson-1": {
        id: "lesson-1",
        title: "プロンプトエンジニアリングとは",
        courseId: "prompt-engineering",
        courseTitle: "プロンプトエンジニアリング入門",
        duration: "20分",
        content: `
# プロンプトエンジニアリングとは

## はじめに

プロンプトエンジニアリングとは、AIモデル（特に大規模言語モデル）から望ましい結果を得るために、入力プロンプト（指示文）を設計・最適化する技術です。適切なプロンプトを作成することで、AIの出力の質、関連性、正確性を大幅に向上させることができます。

## プロンプトエンジニアリングの重要性

プロンプトエンジニアリングが重要な理由は以下の通りです：

1. **AIの能力を最大化**: 同じAIモデルでも、プロンプトの違いによって出力の質が大きく変わります
2. **特定のタスクへの適応**: 汎用AIを特定の目的に合わせて調整できます
3. **一貫性の確保**: 安定した結果を得るための手法を提供します
4. **コスト効率**: モデルの再学習なしに出力を改善できます

## プロンプトエンジニアリングの基本概念

### プロンプトの構成要素

効果的なプロンプトには、以下の要素が含まれていることが多いです：

1. **指示（Instruction）**: AIに何をしてほしいかを明確に伝える
2. **コンテキスト（Context）**: 関連する背景情報や制約条件を提供する
3. **入力データ（Input Data）**: 処理すべき具体的な情報
4. **出力形式（Output Format）**: 期待する回答の形式や構造

### プロンプトの種類

プロンプトには様々な種類があります：

1. **ゼロショットプロンプト**: 例示なしで直接指示を与える
 \`\`\`
 console.log("ゼロショットプロンプトの例");
 \`\`\`

2. **フューショットプロンプト**: 数例を示してから指示を与える
 \`\`\`javascript
 console.log("フューショットプロンプトの例");
 \`\`\`

3. **チェーンオブソート（CoT）**: 段階的な思考プロセスを促す
 \`\`\`javascript
 console.log("チェーンオブソートの例");
 \`\`\`

## プロンプトエンジニアリングの実践例

以下は、同じ質問に対する異なるプロンプト設計の例です：

### 基本的なプロンプト
\`\`\`
console.log("基本的なプロンプトの例");
\`\`\`

### 改良されたプロンプト
\`\`\`
console.log("改良されたプロンプトの例");
\`\`\`

## プロンプトエンジニアリングのベストプラクティス

1. **明確で具体的な指示を与える**
2. **一度に一つのタスクを依頼する**
3. **適切な文脈を提供する**
4. **出力形式を指定する**
5. **例を示す（必要に応じて）**
6. **反復的に改善する**

\`\`\`javascript
// プロンプトテンプレートの例
function createPrompt() {
  console.log("プロンプトテンプレートの例");
}
\`\`\`

次のレッスンでは、効果的なプロンプトの構造について詳しく学んでいきます。
      `,
      },
      "lesson-2": {
        id: "lesson-2",
        title: "効果的なプロンプトの構造",
        courseId: "prompt-engineering",
        courseTitle: "プロンプトエンジニアリング入門",
        duration: "30分",
        content: `
# 効果的なプロンプトの構造

## はじめに

効果的なプロンプトは、AIから最適な結果を引き出すための鍵です。適切に構造化されたプロンプトは、AIの理解を助け、より正確で関連性の高い応答を生成します。このレッスンでは、効果的なプロンプトの構造と各要素の重要性について学びます。

## プロンプトの基本構造

効果的なプロンプトは、通常以下の要素から構成されています：

1. **ロール設定**: AIに特定の役割や専門性を与える
2. **指示**: 実行すべきタスクを明確に伝える
3. **コンテキスト**: 関連する背景情報を提供する
4. **入力データ**: 処理すべき具体的な情報
5. **出力形式**: 期待する回答の形式や構造
6. **制約条件**: 応答に関する制限や条件

## 各要素の詳細と例

### 1. ロール設定

AIに特定の役割や専門性を与えることで、その役割に適した知識や表現スタイルで応答するよう促します。

**例**:
\`\`\`
console.log("ロール設定の例");
\`\`\`

### 2. 指示

AIに何をしてほしいかを明確に伝えます。動詞を使って具体的なアクションを指定しましょう。

**例**:
\`\`\`
console.log("指示の例");
\`\`\`

### 3. コンテキスト

タスクの背景情報や目的を提供することで、AIがより適切な応答を生成できるようになります。

**例**:
\`\`\`
console.log("コンテキストの例");
\`\`\`

### 4. 入力データ

AIが処理すべき具体的な情報を提供します。

**例**:
\`\`\`
console.log("入力データの例");
\`\`\`

### 5. 出力形式

期待する回答の形式や構造を指定します。これにより、AIの応答を制御しやすくなります。

**例**:
\`\`\`
console.log("出力形式の例");
\`\`\`

### 6. 制約条件

応答に関する制限や条件を設定します。

**例**:
\`\`\`
console.log("制約条件の例");
\`\`\`

## 効果的なプロンプトの例

以下は、上記の要素を組み合わせた効果的なプロンプトの例です：

\`\`\`
console.log("効果的なプロンプトの完全な例");
\`\`\`

## プロンプト構造のテンプレート

様々なユースケース向けのプロンプト構造テンプレートを以下に示します：

### 分析テンプレート

\`\`\`javascript
function createAnalysisPrompt() {
  console.log("分析テンプレートの例");
}
\`\`\`

### コンテンツ作成テンプレート

\`\`\`javascript
function createContentPrompt() {
  console.log("コンテンツ作成テンプレートの例");
}
\`\`\`

## まとめ

効果的なプロンプトの構造は、AIとのコミュニケーションの質を大きく向上させます。ロール設定、明確な指示、適切なコンテキスト、具体的な入力データ、出力形式の指定、そして必要に応じた制約条件を組み合わせることで、より精度の高い、目的に合った応答を得ることができます。

次のレッスンでは、様々なユースケースに応じたプロンプト設計について学びます。
      `,
      },
    },
  }

  const lesson = mockLessons[courseId]?.[lessonId]

  if (!lesson) {
    return NextResponse.json({ error: "Lesson not found" }, { status: 404 })
  }

  return NextResponse.json(lesson)
}

