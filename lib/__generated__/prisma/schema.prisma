generator client {
  provider = "prisma-client-js"
  output   = "../lib/__generated__/prisma"
}

datasource db {
  provider = "postgresql" // ご利用のDBに合わせて変更
  url      = env("DATABASE_URL")
}

// 方針：ENUM型は、DBスキーマでは使わず、必要な場合はアプリケーション側で定義する

model User {
  id             String    @id // firebaseUserIdと同じにする
  displayId      String    @unique
  firebaseUserId String    @unique
  stripeUserId   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  plan           String    @default("FREE") // プラン名（例：FREE, PRO,）
  name           String?
  occupation     String?
  birthDate      String?
  deletedAt      DateTime? // 論理削除用
  deleteReason   String? // 論理削除理由

  // リレーション
  examSubmissions ExamSubmission[]
  chatMessages    ChatMessage[]
  chatRoom        ChatRoom[]
}

// 「プログラミング」「生成AI」「Web開発」など
model MasterCategory {
  id          String @id
  name        String
  description String

  // 関連するコースや試験
  courses MasterCourse[]
  exams   MasterExam[]
}

model MasterTag {
  id   String @id
  name String @unique

  // Many-to-many: Course ↔ Tag
  courses MasterCourse[] @relation("CourseTags")
}

// courseの概要などを管理するテーブル。コレ自体で一つのページにもなる
model MasterCourse {
  id             String   @id
  title          String? // 初期はテーブルでなく、ファイルで管理するのでnull可
  summary        String?
  description    String?
  targetAudience String?
  level          String
  difficulty     Int?
  durationMin    Int? // コースの所要時間（分）
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // カテゴリー（例：大・中・小の階層はCategoryテーブルの親子関係で管理）
  categoryId String
  category   MasterCategory @relation(fields: [categoryId], references: [id])

  // Many-to-many: Course ↔ Tag
  tags MasterTag[] @relation("CourseTags")

  // コースを構成するコンテンツ（各記事）
  courseArticles MasterCourseArticle[]
}

// コース同士の関連を管理するテーブル
// 毎回全更新する関係もあり、prismaの暗黙的なテーブルでなく明示的に管理する
model MasterCourseRelation {
  id              String @id
  courseId        String
  relatedCourseId String

  score Float // 基本的にコース概要のembeddingsのcos類似度を保存することを想定

  @@index([courseId])
  @@index([relatedCourseId])
}

// 例：コースの具体的な内容（記事）を管理するテーブル
model MasterCourseArticle {
  id       String       @id
  courseId String
  course   MasterCourse @relation(fields: [courseId], references: [id])

  sequence    Int // コース内での連番
  title       String? // 初期はテーブルでなく、ファイルで管理するのでnull可
  content     String? // 記事本文（ブログ記事形式） 初期はテーブルでなく、ファイルで管理するのでnull可
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  durationMin Int? // 記事の所要時間（分）

  // 演習問題（記事末尾の練習問題）
  exercises MasterCourseArticleExercise[]

  // チャット（「AIに質問する」用）
  chatRoom ChatRoom[]
  faq      MasterCourseArticleFAQ[]
}

// コース内の演習問題（記事末尾の練習問題）
model MasterCourseArticleExercise {
  id              String              @id
  courseArticleId String
  courseArticle   MasterCourseArticle @relation(fields: [courseArticleId], references: [id])

  exerciseType  String // SELECTION or TEXT, 自由記述か選択肢式か
  question      String
  // 複数選択式の場合、optionsをJSON文字列などで保存（例："[\"選択肢1\", \"選択肢2\", ...]"）
  options       String?
  correctAnswer String? // 自由記述の場合はnull可

  createdAt DateTime @default(now())
}

// course内でユーザーとAIのチャットを行うためのテーブル
model ChatRoom {
  id              String              @id
  userId          String
  user            User                @relation(fields: [userId], references: [id])
  courseArticleId String
  courseArticle   MasterCourseArticle @relation(fields: [courseArticleId], references: [id])
  createdAt       DateTime            @default(now())
  chatMessage     ChatMessage[]

  @@index([courseArticleId])
}

model ChatMessage {
  id String @id

  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  // チャット発言者。未ログインの場合も想定できるため、userはオプショナル
  userId     String? // AIの場合はnull
  user       User?    @relation(fields: [userId], references: [id])

  role                  String // 発言者の役割（例：USER or AI）
  message               String
  createdAt             DateTime @default(now())
  masterCourseArticleId String?

  @@index([chatRoomId, createdAt], name: "idx_chatroom_createdAt")
}

model MasterCourseArticleFAQ {
  id              String              @id
  courseArticleId String
  courseArticle   MasterCourseArticle @relation(fields: [courseArticleId], references: [id])

  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseArticleId])
}

model MasterExam {
  id           String         @id
  title        String
  description  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  level        Int // 試験のレベル（例：1, 2, 3）
  timeLimitMin Int // 試験の制限時間（分）
  // 試験もジャンル（カテゴリー）で分類。※各試験は大・中・小のうちいずれかのカテゴリーに所属する
  categoryId   String
  category     MasterCategory @relation(fields: [categoryId], references: [id])
  passingScore Int

  examQuestions  MasterExamQuestion[]
  ExamSubmission ExamSubmission[]
}

model MasterExamQuestion {
  id            String     @id
  examId        String
  exam          MasterExam @relation(fields: [examId], references: [id])
  sequence      Int // 問題の順番（試験内での連番）
  score         Int // 問題の配点
  question      String
  questionType  String // 問題の種類（例：選択肢式、自由記述式）
  // ラジオボタン式の場合、optionsはJSON形式の文字列で保存（例："[\"選択肢1\", \"選択肢2\"]"）
  options       String?
  correctAnswer String? // 自由記述はnull可

  createdAt  DateTime     @default(now())
  ExamAnswer ExamAnswer[]

  @@index([examId])
}

model ExamSubmission {
  id     String     @id
  examId String
  exam   MasterExam @relation(fields: [examId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  submittedAt DateTime @default(now())
  score       Int
  percentile  Float

  examAnswers ExamAnswer[]

  @@index([userId])
  @@index([examId])
}

model ExamAnswer {
  id               String         @id
  examSubmissionId String
  examSubmission   ExamSubmission @relation(fields: [examSubmissionId], references: [id])

  examQuestionId String
  examQuestion   MasterExamQuestion @relation(fields: [examQuestionId], references: [id])

  answer    String
  isCorrect Boolean

  @@index([examSubmissionId])
}
